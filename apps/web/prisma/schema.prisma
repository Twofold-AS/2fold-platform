// Update provider/url via .env
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* --- NextAuth standardmodeller --- */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(VIEWER)
  organizations UserOrg[]
  projects      Project[]
  createdAt     DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* --- Dine domenemodeller --- */
model Organization {
  id        String   @id @default(cuid())
  name      String
  users     UserOrg[]
  projects  Project[]
  createdAt DateTime @default(now())
}

model UserOrg {
  userId String
  orgId  String
  role   Role    @default(VIEWER)

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  org    Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@id([userId, orgId])
}

model Project {
  id            String   @id @default(cuid())
  orgId         String
  name          String
  repoUrl       String
  vercelProjId  String?
  createdAt     DateTime @default(now())

  organization  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model AuditEvent {
  id        String   @id @default(cuid())
  orgId     String
  projectId String?
  actorId   String?
  type      String
  payload   Json
  createdAt DateTime @default(now())
}

enum Role {
  OWNER
  MAINTAINER
  VIEWER
}
